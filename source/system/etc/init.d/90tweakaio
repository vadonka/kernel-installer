#!/system/xbin/bash

# LG Optimus 2X AIO init script v2.0.1
# Copyright (c) by vadonka 2012

# cleanup
deflog="/data/tweakaio/logs/tweakaio.log"

if [ -f $deflog ]; then
	rm -rf $deflog
fi
touch $deflog

# Delete compcache log
complog="/data/tweakaio/logs/compcache.log"

if [ -f $complog ]; then
	rm -f $complog
fi
touch $complog

echo "#########################################" >> $deflog
echo "## LG Optimus 2X tweak script log file ##" >> $deflog
echo "#########################################" >> $deflog
echo -e "##Kernel version: "`uname -r`"\n" >> $deflog

date=`date +%Y.%m.%d-%H.%M.%S`

if [ -f /data/tweakaio/tweakaio.conf ]; then
    echo -e "$date Params file found\n" >> $deflog
    source "/data/tweakaio/tweakaio.conf"
else
    echo "$date Warning! Params file not found! Using default values!" >> $deflog
fi

etweak()
{
	if [ -z "$SMODE" ]; then
	    SMODE="on"
	fi
	if [[ "${SMODE}" == "on" ]]; then
		if [ -f $1 ]; then
			echo "$date Original: $1 = "`cat $1` >> $deflog
			echo $2 > $1
			echo -e "$date Tweaked: $1 = "`cat $1`"\n" >> $deflog
		fi
	elif [ -f $1 ]; then
		echo "$date Original: $1 = "`cat $1` >> $deflog
	fi
}

etweak_nc()
{
	if [ -z "$SMODE" ]; then
	    SMODE="on"
	fi
	if [[ "${SMODE}" == "on" ]]; then
			echo "$date Original: $1 = "`cat $1` >> $deflog
			echo $2 > $1
			echo -e "$date Tweaked: $1 = "`cat $1`"\n" >> $deflog
		else
			echo "$date Original: $1 = "`cat $1` >> $deflog
	fi
}

##########################################
# Basic Memory Management and LMK Tweaks #
##########################################
TOTALMEM=`free | grep Mem | awk 'BEGIN { FS = " " } ; { print $2 }'`

basic_mem_tweaks()
{
if [ -z "$LMKVAL" ]; then
    LMKVAL="str"
fi
	# Strict minfree handler tweak
	etweak /sys/module/lowmemorykiller/parameters/adj 0,1,2,4,6,15
	lmk()
		{
			if [[ "${LMKVAL}" == "$1" ]]; then
				echo "$date Lowmemorykiller mode is: $LMKVAL" >> $deflog
				etweak /sys/module/lowmemorykiller/parameters/minfree $2
			fi
		}

	# lowmemorykiller auto management
	if [[ "${LMKVAL}" == "auto" ]]; then
		echo "$date Using lowmemorykiller auto management mode..." >> $deflog
			if [ "$TOTALMEM" -gt "470000" ]; then
				LMKVAL="std"
			elif [ "$TOTALMEM" -gt "440000" ]; then
				LMKVAL="opt"
			elif [ "$TOTALMEM" -gt "410000" ]; then
				LMKVAL="str"
			else
				LMKVAL="aggr"
			fi
	fi
	# Define minfree
	lmk def 1536,2048,4096,5120,5632,6144
	lmk std 1536,3072,4096,7680,8960,10240
	lmk opt 1536,2048,4096,10240,12800,15360
	lmk str 1536,2048,4096,15360,17920,20480
	lmk aggr 1536,3072,4096,21000,23000,25000
	lmk extr 1536,3072,4096,38400,40960,43520
	lmk ult 1536,3072,4096,51200,57600,64000
}

##################
# Network Tweaks #
##################
network_tweaks()
{
	# Updated, thx for Zeppelinrox
	etweak_nc /proc/sys/net/ipv4/ip_no_pmtu_disc 0
	etweak_nc /proc/sys/net/ipv4/tcp_ecn 0
	etweak_nc /proc/sys/net/ipv4/tcp_timestamps 0
	etweak_nc /proc/sys/net/ipv4/tcp_no_metrics_save 1
	etweak_nc /proc/sys/net/ipv4/tcp_tw_recycle 1
	etweak_nc /proc/sys/net/ipv4/tcp_tw_reuse 1
	etweak_nc /proc/sys/net/ipv4/tcp_sack 1
	etweak_nc /proc/sys/net/ipv4/tcp_window_scaling 0
	etweak_nc /proc/sys/net/ipv4/tcp_max_tw_buckets 360000
	etweak_nc /proc/sys/net/ipv4/tcp_moderate_rcvbuf 1
	etweak_nc /proc/sys/net/ipv4/tcp_reordering 5
	etweak_nc /proc/sys/net/ipv4/route.flush 1
	etweak_nc /proc/sys/net/ipv4/tcp_rfc1337 1
	etweak_nc /proc/sys/net/ipv4/tcp_slow_start_after_idle 0
	etweak_nc /proc/sys/net/ipv4/tcp_sack 1
	etweak_nc /proc/sys/net/ipv4/tcp_fack 1
	etweak_nc /proc/sys/net/ipv4/tcp_rmem 6144,87380,2097152
	etweak_nc /proc/sys/net/ipv4/tcp_wmem 6144,87380,2097152
	etweak_nc /proc/sys/net/ipv4/udp_rmem_min 6144
	etweak_nc /proc/sys/net/ipv4/udp_wmem_min 6144
	etweak_nc /proc/sys/net/ipv4/tcp_window_scaling 1
	etweak_nc /proc/sys/net/ipv4/tcp_congestion_control cubic
	etweak_nc /proc/sys/net/ipv4/tcp_syncookies 1
	etweak_nc /proc/sys/net/ipv4/conf.all.rp_filter 1
	etweak_nc /proc/sys/net/ipv4/conf.default.rp_filter 1
	etweak_nc /proc/sys/net/ipv4/tcp_synack_retries 2
	etweak_nc /proc/sys/net/ipv4/tcp_syn_retries 2
	etweak_nc /proc/sys/net/ipv4/tcp_max_syn_backlog 1024
	etweak_nc /proc/sys/net/ipv4/tcp_max_tw_buckets 16384
	etweak_nc /proc/sys/net/ipv4/icmp_echo_ignore_all 1
	etweak_nc /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 1
	etweak_nc /proc/sys/net/ipv4/tcp_no_metrics_save 1
	etweak_nc /proc/sys/net/ipv4/tcp_fin_timeout 15
	etweak_nc /proc/sys/net/ipv4/tcp_keepalive_intvl 30
	etweak_nc /proc/sys/net/ipv4/tcp_keepalive_probes 5
	etweak_nc /proc/sys/net/ipv4/tcp_keepalive_time 1800
	etweak_nc /proc/sys/net/ipv4/ip_forward 0
	etweak_nc /proc/sys/net/ipv4/conf/default/accept_source_route 0
	etweak_nc /proc/sys/net/ipv4/conf/default/accept_redirects 0
	etweak_nc /proc/sys/net/ipv4/conf/default/secure_redirects 0
	etweak_nc /proc/sys/net/ipv4/conf/all/accept_source_route 0
	etweak_nc /proc/sys/net/ipv4/conf/all/accept_redirects 0
	etweak_nc /proc/sys/net/ipv4/conf/all/secure_redirects 0
	etweak_nc /proc/sys/net/core/wmem_default 262144
	etweak_nc /proc/sys/net/core/wmem_max 2097152
	etweak_nc /proc/sys/net/core/rmem_default 262144
	etweak_nc /proc/sys/net/core/rmem_max 2097152
	etweak_nc /proc/sys/net/core/netdev_max_backlog 262144
	etweak_nc /proc/sys/net/core/somaxconn 262144
	etweak_nc /proc/sys/net/core/optmem_max 20480
	etweak_nc /proc/sys/net/unix/max_dgram_qlen 50
}

#############
# VM Tweaks #
#############
vm_tweaks()
{
	# Disable normalized sleeper
	mount -t debugfs none /sys/kernel/debug
	echo NO_NORMALIZED_SLEEPER > /sys/kernel/debug/sched_features
	# Allow CPU1 core
	chmod 666 /sys/devices/system/cpu/cpu1/online
	etweak /sys/devices/system/cpu/cpu1/online 1
	chmod 444 /sys/devices/system/cpu/cpu1/online
	# Memory management, updated thx for Zeppelinrox
	etweak /proc/sys/vm/oom_kill_allocating_task 0
	etweak /proc/sys/vm/oom_dump_tasks 1
	etweak /proc/sys/vm/panic_on_oom 0
	etweak /proc/sys/vm/laptop_mode 0
	etweak /proc/sys/vm/block_dump 0
	etweak /proc/sys/vm/swappiness 0
	etweak /proc/sys/vm/dirty_background_ratio 60
	etweak /proc/sys/vm/dirty_ratio 95
	etweak /proc/sys/vm/min_free_kbytes 10240
	etweak /proc/sys/vm/vfs_cache_pressure 10
	etweak /proc/sys/vm/overcommit_memory 1
	etweak /proc/sys/vm/page-cluster 3
	etweak /proc/sys/vm/min_free_order_shift 4
	etweak /proc/sys/vm/dirty_writeback_centisecs 2000
	etweak /proc/sys/vm/dirty_expire_centisecs 1000
	etweak /proc/sys/fs/lease-break-time 10
	etweak /proc/sys/fs/file-max 65536
	etweak_nc /proc/sys/kernel/panic 30
	etweak_nc /proc/sys/kernel/panic_on_oops 0
	etweak_nc /proc/sys/kernel/sched_child_runs_first 0
	etweak_nc /proc/sys/kernel/sched_compat_yield 1
	etweak_nc /proc/sys/kernel/sched_features 24189
	etweak_nc /proc/sys/kernel/sched_latency_ns 18000000
	etweak_nc /proc/sys/kernel/sched_min_granularity_ns 1500000
	etweak_nc /proc/sys/kernel/sched_shares_ratelimit 256000
	etweak_nc /proc/sys/kernel/sched_wakeup_granularity_ns 3000000
	etweak_nc /proc/sys/kernel/threads-max 5000
	etweak_nc /proc/sys/kernel/msgmni 2048
	etweak_nc /proc/sys/kernel/msgmax 64000
	etweak_nc /proc/sys/kernel/shmmni 4096
	etweak_nc /proc/sys/kernel/shmall 2097152
	etweak_nc /proc/sys/kernel/shmmax 268435456
	etweak_nc /proc/sys/kernel/sem 500,512000,64,2048
	etweak_nc /proc/sys/kernel/hung_task_timeout_secs 30
}

ccache()
{
if [ -z "$CS_SIZE" ]; then
    CS_SIZE="50"
fi
if [ -z "$CS_RATIO" ]; then
    CS_RATIO="20"
fi
if [ -z "$INTERVAL" ]; then
    INTERVAL="4"
fi
	# Compcache management
	ccache_proc()
	{
		zram_init()
		{
			echo "$date disable swap" >> $complog
			swapoff /dev/block/zram0
			echo "$date reset swap state" >> $complog
			echo 1 > /sys/block/zram0/reset
			echo "$date enable system property" >> $complog
			setprop persist.compcache.user 1
			setprop persist.service.compcache 1
			COMPUS=`getprop persist.compcache.user`
			COMPSER=`getprop persist.service.compcache`
			echo "$date verify system property" >> $complog
			if [ "$COMPUS" == "1" -a "$COMPSER" == "1" ]; then
				echo "$date system property setup complete" >> $complog
			else
				echo "$date ERROR: system property setup is incomplete!" >> $complog
			fi
			echo "$date drop cache" >> $complog
			sync; sysctl -w vm.drop_caches=3 > /dev/null
			echo "$date tweak swappiness and vfs_cache_pressure" >> $complog
			etweak /proc/sys/vm/swappiness 100
			etweak /proc/sys/vm/vfs_cache_pressure 100
			echo "$date set zram disksize to $(($CS_SIZE))MB" >> $complog
			echo $(($1*1024*1024)) > /sys/block/zram0/disksize
			echo "$date verify disksize..." >> $complog
			CS_SIZE_SET=$((`cat /sys/block/zram0/disksize`/1024/1024))
			if [ "$CS_SIZE_SET" == "$CS_SIZE" ]; then
				echo "$date Compcache size is match" >> $complog
			else
				echo "$date ERROR: compcache size not match!" >> $complog
			fi
			echo "$date format swap" >> $complog
			mkswap /dev/block/zram0 > /dev/null
			echo "$date enable swap" >> $complog
			swapon /dev/block/zram0
			echo "$date compcache initialization successfully completed!" >> $complog
		}
		#check zram is a block device?
		if [ -b "/dev/block/zram0" ]; then
			echo "$date Found zram device!" >> $complog
			echo "$date Starting zram init..." >> $complog
			zram_init $CS_SIZE
		# check zram is a module?
		elif [ -f "/system/lib/modules/zram.ko" -a \
			   -f "/system/lib/modules/lzo_compress.ko" -a \
			   -f "/system/lib/modules/lzo_decompress.ko" ]; then
			echo "$date zram device not found, trying to load from module..." >> $complog
			modprobe zram num_devices=2 && sleep 1
			if [ -b "/dev/block/zram0" ]; then
				echo "$date Found zram device!" >> $complog
				echo "$date Starting zram init..." >> $complog
				zram_init $CS_SIZE
			else
				echo "$date ERROR: zram module not loaded!" >> $complog
			fi
		fi
		# Cron job for periodically cache drop
		mkdir -p /data/cron
		echo "* */$INTERVAL * * * sync; sysctl -w vm.drop_caches=3" > /data/cron/root
		/system/xbin/crond -b -l 0 -c /data/cron -L /data/cron/cron.log
	}
		if [[ "${CS_SIZE}" == "auto" ]]; then
			CS_SIZE=$(($TOTALMEM*$CS_RATIO/102400))
			echo "$date Using compcache auto management mode..." >> $complog
			echo "$date Compcache ratio is $(($CS_RATIO))%" >> $complog
			echo "$date Total memory is $(($TOTALMEM/1024))MB" >> $complog
			echo "$date Used compcache size is $(($CS_SIZE))MB" >> $complog
			ccache_proc
		else
			echo "$date Compcache in static mode size is $(($CS_SIZE))MB" >> $complog
			ccache_proc
		fi
}

#######################
# Mount Option Tweaks #
#######################
mount_tweaks()
{
if [ -z "$SCHEDULER" ]; then
    SCHEDULER="bfq"
fi
	# Remount with noatime and nodiratime, updated thx for SetiroN
	busybox mount -o remount,noatime,nodiratime,data=writeback,barrier=0,nobh,commit=180,noauto_da_alloc /system
	busybox mount -o remount,noatime,nodiratime,data=writeback,barrier=0,nobh,nosuid,nodev,commit=120,noauto_da_alloc /data
	busybox mount -o remount,noatime,nodiratime,data=writeback,nobh,barrier=0,commit=150,noauto_da_alloc /cache 
	# Updated IO tweaks, thx for Zeppelinrox
	m0()
	{
		etweak /sys/block/$1/queue/rotational 0
		etweak /sys/block/$1/queue/read_ahead_kb 2048
		etweak /sys/block/$1/queue/iostats 0
		etweak /sys/block/$1/queue/iosched/low_latency 1
		etweak /sys/block/$1/queue/iosched/back_seek_penalty 1
		etweak /sys/block/$1/queue/iosched/back_seek_max 1000000000
		etweak /sys/block/$1/queue/iosched/slice_idle 0
		etweak /sys/block/$1/queue/iosched/fifo_batch 1
		etweak /sys/block/$1/queue/iosched/quantum 16
		etweak /sys/block/$1/queue/nr_requests 512
		etweak /sys/block/$1/queue/scheduler $SCHEDULER
	}
	m0 mmcblk0 && m0 mmcblk1
	echo 2048 > /sys/devices/virtual/bdi/179:0/read_ahead_kb
}

######################
#   CPU undervolt    #
######################
cpuuv()
{
    cpuuv_shift()
    {
	# Define UV shift
	if [ -z "$1" ]; then
	    export $2="0"
	elif [ "$1" -gt "$4" ]; then
	    export $2=$(($3-$1))
	else
	    export $2=$(($3-$4))
	fi
    }

    # Call the procedure
	cpumaxfreq=`cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq`
	cpuuv_shift $CPU216MHZ CPU216UV 780 770
	cpuuv_shift $CPU324MHZ CPU324UV 790 770
	cpuuv_shift $CPU503MHZ CPU503UV 840 780
	if [[ "${cpumaxfreq}" == "1216000" ]]; then
	cpuuv_shift $CPU655MHZ CPU655UV 870 800
	fi
	cpuuv_shift $CPU800MHZ CPU800UV 900 820
	cpuuv_shift $CPU1015MHZ CPU1015UV 1000 920
	cpuuv_shift $CPU1100MHZ CPU1100UV 1050 1020
	cpuuv_shift $CPU1216MHZ CPU1216UV 1150 1120
	if [[ "${cpumaxfreq}" == "1408000" ]]; then
	cpuuv_shift $CPU1408MHZ CPU1408UV 1250 1220
	fi

# Apply the UV values
if [[ "${cpumaxfreq}" == "1216000" ]]; then
	echo "$date CPU max freq is $cpumaxfreq" >> $deflog
	echo "$date Applying UV..." >> $deflog
	echo "$CPU1216UV $CPU1100UV $CPU1015UV $CPU800UV $CPU655UV $CPU503UV $CPU324UV $CPU216UV" > /sys/devices/system/cpu/cpu0/cpufreq/UV_mV_table
	echo "$date UV shift levels are set to: "`cat /sys/devices/system/cpu/cpu0/cpufreq/UV_mV_table` >> $deflog
fi
if [[ "${cpumaxfreq}" == "1408000" ]]; then
	echo "$date CPU max freq is $cpumaxfreq" >> $deflog
	echo "$date Applying UV..." >> $deflog
	echo "$CPU1408UV $CPU1216UV $CPU1100UV $CPU1015UV $CPU800UV $CPU503UV $CPU324UV $CPU216UV" > /sys/devices/system/cpu/cpu0/cpufreq/UV_mV_table
	echo "$date UV shift levels are set to: "`cat /sys/devices/system/cpu/cpu0/cpufreq/UV_mV_table` >> $deflog
fi
}

##################
# Dalvik cleaner #
##################
dalvik_cleaner()
{
	mount -o remount,rw /system
	mount -o remount,rw /data
	export DALVIK=dalviknotfound
	echo "$date Starting Dalvik Cleaner" >> $deflog
	echo "$date Checking where dalvik exists" >> $deflog
	if [ -e "/data/dalvik-cache/system@framework@services.jar@classes.dex" ]; then
		export DALVIK=/data/dalvik-cache
		echo "$date Dalvik found on Data" >> $deflog
	fi

	if [ "$DALVIK" != "dalviknotfound" ]; then
		cd "$DALVIK"
		echo "$date Checking Dex entries from /data/app" >> $deflog
		for dex in data@app@*.dex; do
			apk=`echo "$dex" | sed "s/data@app@//g" | sed "s/@classes.*//g"`
			if [ ! -e "/data/app/$apk" ]; then
				echo "$date Outdated dex found for $dex removing..." >> $deflog
				rm $dex
			else
			    echo "$date Outdated dex not found in /data/app" >> $deflog
			fi
		done

		echo "$date Checking Dex entries from /system/app" >> $deflog
		for dex in system@app@*.dex; do
			apk=`echo "$dex" | sed "s/system@app@//g" | sed "s/@classes.*//g"`
				if [ ! -e "/system/app/$apk" ]; then
					echo "$date Outdated dex found for $dex removing..." >> $deflog
					rm $dex
				else
				    echo "$date Outdated dex not found in /system/app" >> $deflog
				fi
		done

		echo "$date Checking Dex entries from /system/framework" >> $deflog
		for dex in system@framework@*.dex; do
			jar=`echo "$dex" | sed "s/system@framework@//g" | sed "s/@classes.*//g"`
				if [ ! -e "/system/framework/$jar" ]; then
					echo "$date Outdated dex found for $dex removing..." >> $deflog
					rm $dex
				else
				    echo "$date Outdated dex not found in /system/framework" >> $deflog
				fi
		done
	else
		echo "$date No framework found, hopefully this is first boot." >> $deflog
	fi	
	mount -o remount,ro /system
}

####################
# SQLite defragger #
####################
sqlidefrag()
{
	echo "$date SQLite Defragger Start" >> $deflog
	if [ -e /system/xbin/sqlite3 -o \
		 -e /system/bin/sqlite3 ]; then
		echo "$date SQLite3 binary found!" >> $deflog
		echo "$date Starting defrag process..." >> $deflog
			for i in `find /data -iname "*.db"`; do
				/system/xbin/sqlite3 $i 'VACUUM;';
			done
		echo "$date Defrag process completed." >> $deflog
	else
		echo "$date WARNING: SQLite3 binary not found!" >> $deflog
		echo "$date Skipping defrag process" >> $deflog
	fi
}
 
#######################
# Procedures end here #
#######################

sysctl -p /etc/sysctl.conf
if [ -z "$LMKMODE" ]; then
    basic_mem_tweaks
elif [[ "${LMKMODE}" == "on" ]]; then
    basic_mem_tweaks
fi
if [ -z "$NETTWEAKS" ]; then
    network_tweaks
elif [[ "${NETTWEAKS}" == "on" ]]; then
    network_tweaks
fi
if [ -z "$VMTWEAKS" ]; then
    vm_tweaks
elif [[ "${VMTWEAKS}" == "on" ]]; then
    vm_tweaks
fi
if [ -z "$MTWEAKS" ]; then
    mount_tweaks
elif [[ "${MTWEAKS}" == "on" ]]; then
    mount_tweaks
fi
if [ ! -z "$COMPCACHE" ]; then
    if [[ "${COMPCACHE}" == "on" ]]; then
	ccache
    fi
else
    setprop persist.compcache.user 0
    setprop persist.service.compcache 0
fi
if [ ! -z "$LOGGER" ]; then
    if [[ "${LOGGER}" == "off" ]]; then
	if [ -e /dev/log/main ]; then
		rm /dev/log/main
	fi
    fi
fi

if [ ! -z "$CPU_UV" ]; then
	echo "$date CPU_UV defined" >> $deflog
    if [[ "${CPU_UV}" == "on" ]]; then
		echo "$date CPU Undervolt enabled" >> $deflog
		cpuuv
	else
		echo "$date CPU Undervolt defined but its disabled" >> $deflog
    fi
else
    echo "$date CPU Undervolt is undefined, used the stock levels" >> $deflog
fi

if [ ! -z "$DALVIK_CLEANER" ]; then
	if [[ "${DALVIK_CLEANER}" == "on" ]]; then
	dalvik_cleaner
	fi
fi

if [ ! -z "$SQLITE_DEFRAG" ]; then
	if [[ "${SQLITE_DEFRAG}" == "on" ]]; then
	sqlidefrag
	fi
fi

exit 1
