#!/system/bin/sh

# OTF adjuster script v1.2.4
# (C) Vadonka
# This script is using the mkbootimg and the unpackbootimg binaries for unpacking and packing the kernel.
# All credits for the kernel image tools author.

# Basedir
bd=/cache

echo "- Checking kernel tool binary files..."
if [ ! -f /system/xbin/mkbootimg -a ! -f /system/xbin/unpackbootimg ]; then
	echo "ERROR: Kernel tools not found"
	echo "Program will exit now"
	exit 1
else
	echo "- Found kernel tool files"
fi
echo "- Searching for the old files..."
rm -rf $bd/boot.img*
echo "- Clean process completed"
echo "- Dumping kernel image..."
bimg=$bd/boot.img
dd if=/dev/block/mmcblk0p5 of=$bimg > /dev/null 2>&1
if [ ! -f $bimg ]; then
	echo "ERROR: Kernel image dump failed"
	echo "Program will exit now."
	exit 1
else
	echo "- Kernel image dumped succesfuly"
fi
echo "- Unpacking kernel image..."
unpackbootimg -i $bimg -o $bd -p 0x800 > /dev/null 2>&1
rd="$bd/boot.img-ramdisk.gz"
zim="$bd/boot.img-zImage"
cmdline="$bd/boot.img-cmdline"
if [ "$?" -ne 0 -o ! -f $rd ] && [ "$?" -ne 0 -o ! -f $zim ]; then
    echo "ERROR: kernel image unpacking failed"
	echo "Program will exit now."
	exit 1
else
	rdsize=`ls -la $bd | grep boot.img-ramdisk.gz | awk 'BEGIN {-F " "} {print $5}'`
	zimsize=`ls -la $bd | grep boot.img-zImage | awk 'BEGIN {-F " "} {print $5}'`
	if [ "$rdsize" -gt "180000" -a "$zimsize" -gt "1800000" ]; then
		echo "- Kernel image unpacked succesfuly"
		echo "- Removing old image file..."
		rm -rf $bimg
	else
		echo "zImage and ramdisk size probably mismatch"
		echo "Program will exit now."
		exit 1
	fi
fi

process()
{
echo "- Building kernel image..."
mkbootimg --kernel $zim --ramdisk $rd --cmdline "mem=$((512-(128-$ramhack)-1))M@0M nvmem=$((128-$ramhack))M@$((512-(128-$ramhack)))M loglevel=0 muic_state=1 lpj=9994240 CRC=3010002a8e458d7 vmalloc=256M brdrev=1.0 video=tegrafb console=ttyS0,115200n8 usbcore.old_scheme_first=1 tegraboot=sdmmc tegrapart=recovery:35e00:2800:800,linux:34700:1000:800,mbr:400:200:800,system:600:2bc00:800,cache:2c200:8000:800,misc:34200:400:800,userdata:38700:c0000:800 androidboot.hardware=p990 avpfreq=$avpfreq gpufreq=$gpufreq vdefreq=$vdefreq" -o $bimg --base 0x10000000 > /dev/null 2>&1
if [ "$?" -ne 0 -o ! -f $bimg ]; then
    echo "ERROR: Building kernel failed!"
	echo "Program will exit now"
	exit 1
else
	imgsize=`ls -la $bd | grep boot.img$ | awk 'BEGIN {-F " "} {print $5}'`
	if [ "$imgsize" -gt "1800000" ]; then
		echo "- New kernel image created succesfuly"
	else
		echo "ERROR: Building kernel failed!"
		echo "Program will exit now"
		exit 1
	fi
fi
echo "- Flashing the kernel..."
dd if=/dev/zero of=/dev/block/mmcblk0p5 > /dev/null 2>&1
dd if=$bimg of=/dev/block/mmcblk0p5 > /dev/null 2>&1
if [ "$?" -ne 0 ]; then
	echo "ERROR: Kernel flashing failed!"
	echo "Try again! Dont reboot!"
	exit 1
else
	echo "- Kernel image flashed succesfuly"
fi
echo "- Clean up..."
rm -rf $bimg*
echo ""
echo "*** Program completed succesfuly ***"
exit 1
}

mem_orig=`cat $cmdline | tr ' ' '\n' | grep ^mem | awk -F '=' '{print $2}'`
nvmem_orig=`cat $cmdline | tr ' ' '\n' | grep ^nvmem | awk -F '=' '{print $2}'`
avpfreq_orig=`cat $cmdline | tr ' ' '\n' | grep ^avpfreq`
gpufreq_orig=`cat $cmdline | tr ' ' '\n' | grep ^gpufreq`
vdefreq_orig=`cat $cmdline | tr ' ' '\n' | grep ^vdefreq`
avpfreq=`echo $avpfreq_orig | awk -F '=' '{print $2}'`
gpufreq=`echo $gpufreq_orig | awk -F '=' '{print $2}'`
vdefreq=`echo $vdefreq_orig | awk -F '=' '{print $2}'`
gpuramsize=`echo $nvmem_orig | awk -F '@' '{print $1}' | sed -e s/M//`
ramhack=$((128-$gpuramsize))

set_done=0
while [ $set_done = 0 ]
do
 echo -e '\n'
 echo "**********************************"
 echo "*********< OTF changer >**********"
 echo "*******< (C) by vadonka  >********"
 echo "**********************************"
 echo ""
 echo "RAMHack size: $ramhack"
 echo "AVP Freq: $avpfreq"
 echo "GPU Freq: $gpufreq"
 echo "VDE Freq: $vdefreq"
 echo ""
 echo "1. Change RAMHack size"
 echo "2. Change AVP Freq"
 echo "3. Change GPU Freq"
 echo "4. Change VDE Freq"
 echo ""
 echo "5. Done"
 echo ""
 echo "6. Exit program"
 echo ""
 echo -n "Please enter an option [1 - 6]: "
 read opt
 case $opt in
  1) 
	rset=0;
	while [ $rset = 0 ]
	do
	 echo "1. 0MB  use  128MB RAM for the GPU"
	 echo "2. 32MB leave 96MB RAM for the GPU"
	 echo "3. 48MB leave 80MB RAM for the GPU"
	 echo "4. 64MB leave 64MB RAM for the GPU"
	 echo "5. 80MB leave 48MB RAM for the GPU"
	 echo "6. 96MB leave 32MB RAM for the GPU"
	 echo ""
	 echo "7. Cancel"
	 echo ""
	 echo -n "Please enter an option [1 - 7]: "
	 read rhselect
	 case $rhselect in
	  1) ramhack=0;
		 rset=1;
	     ;;
	  2) ramhack=32;
		 rset=1;
	     ;;
	  3) ramhack=48;
	     rset=1;
	     ;;
	  4) ramhack=64;
	     rset=1;
	     ;;
	  5) ramhack=80;
	     rset=1;
 	     ;;
	  6) ramhack=96;
	     rset=1;
	     ;;
	  7) rset=1;
	     ;;
	  *) echo "$rhselect is an invaild option. Please select option between 1-7 only";
         echo "Press [enter] key to continue. . .";
         read enterKey;;
	  esac
	done;
	;;
  2) 
	avpset=0;
	while [ $avpset = 0 ]
	do
	 echo "AVP Freq range: 200000-280000"
	 echo "1. 200000 KHz"
	 echo "2. 220000 KHz"
	 echo "3. 240000 KHz"
	 echo "4. 260000 KHz"
	 echo "5. 280000 Khz"
	 echo "6. Custom value"
	 echo ""
	 echo "7. Cancel"
	 echo ""
	 echo -n "Please enter an option [1 - 7]: "
	 read avpselect
	 case $avpselect in
	  1) avpfreq=200000;
		 avpset=1;
	     ;;
	  2) avpfreq=220000;
		 avpset=1;
	     ;;
	  3) avpfreq=240000;
	     avpset=1;
	     ;;
	  4) avpfreq=260000;
	     avpset=1;
	     ;;
	  5) avpfreq=280000;
	     avpset=1;
 	     ;;
	  6) echo -n "AVP Freq: ";
		 avptemp=0
		 while [ "$avptemp" -lt "200000" ] || [ "$avtemp" -gt "280000" ]
		 do
		  echo "Allowed values range: 200000-280000"
		  echo -n "AVP Freq: "
		  read avptemp
		 done
		 avpfreq=$avptemp;
		 avpset=1;
	     ;;
	  7) avpset=1;
	     ;;
	  *) echo "$avpselect is an invaild option. Please select option between 1-7 only";
         echo "Press [enter] key to continue. . .";
         read enterKey;;
	 esac
	 done;
	 ;;
  3) 
	gpuset=0;
	while [ $gpuset = 0 ]
	do
	 echo "GPU Freq range: 300000-366000"
	 echo "1. 300000 KHz"
	 echo "2. 333000 KHz"
	 echo "3. 366000 KHz"
	 echo "4. Custom value"
	 echo ""
	 echo "5. Cancel"
	 echo ""
	 echo -n "Please enter an option [1 - 5]: "
	 read gpuselect
	 case $gpuselect in
	  1) gpufreq=300000;
		 gpuset=1;
	     ;;
	  2) gpufreq=333000;
		 gpuset=1;
	     ;;
	  3) gpufreq=366000;
	     gpuset=1;
	     ;;
	  4) echo -n "GPU Freq: ";
		 gputemp=0
		 while [ "$gputemp" -lt "300000" ] || [ "$gputemp" -gt "366000" ]
		 do
		  echo "Allowed values range: 300000-366000"
		  echo -n "GPU Freq: "
		  read gputemp
		 done
		 gpufreq=$gputemp;
		 gpuset=1;
	     ;;
	  5) gpuset=1;
	     ;;
	  *) echo "$gpuselect is an invaild option. Please select option between 1-5 only";
         echo "Press [enter] key to continue. . .";
         read enterKey;;
	 esac
	 done;
	 ;;
  4) 
	vdeset=0;
	while [ $vdeset = 0 ]
	do
	 echo "VDE Freq range: 600000-700000"
	 echo "1. 600000 KHz"
	 echo "2. 620000 KHz"
	 echo "3. 650000 KHz"
	 echo "4. 680000 Khz"
	 echo "5. 700000 Khz"
	 echo "6. Custom value"
	 echo ""
	 echo "7. Cancel"
	 echo ""
	 echo -n "Please enter an option [1 - 7]: "
	 read vdeselect
	 case $vdeselect in
	  1) vdefreq=600000;
		 vdeset=1;
	     ;;
	  2) vdefreq=620000;
		 vdeset=1;
	     ;;
	  3) vdefreq=650000;
	     vdeset=1;
	     ;;
	  4) vdefreq=680000;
	     vdeset=1;
	     ;;
	  5) vdefreq=700000;
	     vdeset=1;
	     ;;
	  6) echo -n "VDE Freq: ";
		 vdetemp=0
		 while [ "$vdetemp" -lt "600000" ] || [ "$vdetemp" -gt "700000" ]
		 do
		  echo "Allowed values range: 600000-700000"
		  echo -n "VDE Freq: "
		  read vdetemp
		 done
		 vdefreq=$vdetemp;
		 vdeset=1;
	     ;;
	  7) vdeset=1;
	     ;;
	  *) echo "$vdeselect is an invaild option. Please select option between 1-7 only";
         echo "Press [enter] key to continue. . .";
         read enterKey;;
	 esac
	 done;
	 ;;
  5) set_done=1;
     ;;
  6) exit 1
     ;;
  *) echo "$opt is an invaild option. Please select option between 1-6 only";
     echo "Press [enter] key to continue. . .";
     read enterKey;;
esac
done

mem_old="mem=$mem_orig"
mem_new="mem=$((512-(128-$ramhack)-1))M@0M"
nvmem_old="nvmem=$nvmem_orig"
nvmem_new="nvmem=$((128-$ramhack))M@$((512-(128-$ramhack)))M"
avpfreq_new="avpfreq=$avpfreq"
gpufreq_new="gpufreq=$gpufreq"
vdefreq_new="vdefreq=$vdefreq"

if [ "$mem_old" != "$mem_new" ] || \
   [ "$nvmem_old" != "$nvmem_new" ] || \
   [ "$avpfreq_orig" != "$avpfreq_new" ] || \
   [ "$gpufreq_orig" != "$gpufreq_new" ] || \
   [ "$vdefreq_orig" != "$vdefreq_new" ]; then
echo -e '\n'
echo "The following values will be changed!"
echo ""
echo -e "***< ORIG >********< NEW >****"
echo    "******************************"
if [ "$mem_old" != "$mem_new" ]; then
	echo -e "$mem_old\t$mem_new"
fi
if [ "$nvmem_old" != "$nvmem_new" ]; then
	echo -e "$nvmem_old\t$nvmem_new"
fi
if [ "$avpfreq_orig" != "$avpfreq_new" ]; then
	echo -e "$avpfreq_orig\t$avpfreq_new"
fi
if [ "$gpufreq_orig" != "$gpufreq_new" ]; then
	echo -e "$gpufreq_orig\t$gpufreq_new"
fi
if [ "$vdefreq_orig" != "$vdefreq_new" ]; then
	echo -e "$vdefreq_orig\t$vdefreq_new"
fi
echo ""
echo -n "Are you sure? (y/n) "
read confirm
if [ "$confirm" == "y" ]; then
	process
else
	echo "Pogram terminated without any change"
	exit 1
fi
else
	echo "You dont change anything."
	echo "Program will exit now."
	exit 1
fi
